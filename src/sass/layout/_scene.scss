@keyframes rubik-s-rotation {
    0% {
        transform: rotateX(0deg) rotateY(160deg) rotateZ(45deg);
    }
    100% {
        transform: rotateX(0deg) rotateY(520deg) rotateZ(45deg);
    }
}
/* Those rules only generate the Rubik's Cube skeleton
   see the .js files for more details on the process
*/
.scene {
    height: 80vh;
    display: flex;
    justify-content: center;
    align-items: center;
    .rubik-s-cube {
        width: 3 * $cube-width;
        height: 3 * $cube-height;
        position: relative;
        transform: rotateX(340deg) rotateY(160deg) rotateZ(0deg);
        animation: rubik-s-rotation 10s linear infinite;
        transform-style: preserve-3d;
        &__cube {
            position: absolute;
            width: $cube-width;
            height: $cube-height;
            transform-style: preserve-3d;
            &:nth-of-type(1) {
                transform: translate3d(0, 0, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(3) {
                transform: translate3d(0, 0, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(4) {
                transform: translate3d($cube-width, 0, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(5) {
                transform: translate3d($cube-width, 0, 0);
            }
            &:nth-of-type(6) {
                transform: translate3d($cube-width, 0, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(7) {
                transform: translate3d(2 * $cube-width, 0, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(8) {
                transform: translate3d(2 * $cube-width, 0, 0);
            }
            &:nth-of-type(9) {
                transform: translate3d(2 * $cube-width, 0, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(10) {
                transform: translate3d(0, $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(11) {
                transform: translate3d(0, $cube-height, 0);
            }
            &:nth-of-type(12) {
                transform: translate3d(0, $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(13) {
                transform: translate3d($cube-width, $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(14) {
                transform: translate3d($cube-width, $cube-height, 0);
            }
            &:nth-of-type(15) {
                transform: translate3d($cube-width, $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(16) {
                transform: translate3d(2 * $cube-width, $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(17) {
                transform: translate3d(2 * $cube-width, $cube-height, 0);
            }
            &:nth-of-type(18) {
                transform: translate3d(2 * $cube-width, $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(19) {
                transform: translate3d(0, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(20) {
                transform: translate3d(0, 2 * $cube-height, 0);
            }
            &:nth-of-type(21) {
                transform: translate3d(0, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(22) {
                transform: translate3d($cube-width, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(23) {
                transform: translate3d($cube-width, 2 * $cube-height, 0);
            }
            &:nth-of-type(24) {
                transform: translate3d($cube-width, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &:nth-of-type(25) {
                transform: translate3d(2 * $cube-width, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);
            }
            &:nth-of-type(26) {
                transform: translate3d(2 * $cube-width, 2 * $cube-height, 0);
            }
            &:nth-of-type(27) {
                transform: translate3d(2 * $cube-width, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));
            }
            &__side {
                border: 4px solid $borders-clr;
                box-sizing: border-box;
                position: absolute;
                &:nth-of-type(1),
                &:nth-of-type(2) {
                    width: $cube-width;
                    height: $cube-height;
                }
                &:nth-of-type(1) {
                    transform: translate3d(0, 0, $cube-depth * $transform-coeff);
                }
                &:nth-of-type(2) {
                    transform: translate3d(0, 0, $cube-depth * (-$transform-coeff));
                }
                &:nth-of-type(3),
                &:nth-of-type(4) {
                    width: $cube-depth;
                    height: $cube-height;
                    left: 50%;
                    top: 50%;
                }
                &:nth-of-type(3) {
                    transform: translate(-50%, -50%) rotateY($side-rotation-angle) translate3d(0, 0, $cube-width * $transform-coeff);
                }
                &:nth-of-type(4) {
                    transform: translate(-50%, -50%) rotateY(-$side-rotation-angle) translate3d(0, 0, $cube-width * $transform-coeff);
                }
                &:nth-of-type(5),
                &:nth-of-type(6) {
                    height: $cube-depth;
                    width: $cube-width;
                    top: 50%;
                    left: 50%;
                }
                &:nth-of-type(5) {
                    transform: translate(-50%, -50%) rotateX(-$side-rotation-angle) translate3d(0, 0, $cube-height * $transform-coeff);
                }
                &:nth-of-type(6) {
                    transform: translate(-50%, -50%) rotateX($side-rotation-angle) translate3d(0, 0, $cube-height * $transform-coeff);
                }
            }
            .covered {
                background-color: $covered-sides-clr;
            }
        }
    }
}
