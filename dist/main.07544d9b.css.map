{"version":3,"sources":["sass/base/_reset.scss","sass/base/_base.scss","sass/layout/_scene.scss","sass/abstracts/_variables.scss"],"names":[],"mappings":"AAAA;AAEA;AAAA;AAAA;AAAA;AAIC;EACG;EACA;;;AAGJ;AACA;AAAA;AAAA;EAGI;;;AAGJ;AACA;EACI;;;AAGJ;AACA;EACI;;;AAGJ;AACA;EACI;;;AAGJ;AACA;EACI;;;ACnCJ;EACI;EACA;EACA;;AACA;EACI;;AAEJ;EACI;;;ACRR;EACI;IACI;;EAEJ;IACI;;;AAIR;AAAA;AAAA;AAGA;EACI;EACA;EACA;EACA;;AACA;EACI;EACA;EACA;EACA;EACA;EACA;;AACA;EACI;EACA,OCrBC;EDsBD,QCrBE;EDsBF;;AACA;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EACI;EACA;EACA;;AACA;EAEI,OC5GP;ED6GO,QC5GN;;AD8GE;EACI;;AAEJ;EACI;;AAEJ;EAEI,OCrHP;EDsHO,QCvHN;EDwHM;EACA;;AAEJ;EACI;;AAEJ;EACI;;AAEJ;EAEI,QClIP;EDmIO,OCrIP;EDsIO;EACA;;AAEJ;EACI;;AAEJ;EACI;;AAGR;EACI,kBCpJI","file":"main.07544d9b.css","sourceRoot":"../src","sourcesContent":["/*** The new CSS Reset - version 1.3.1 (last updated 28.10.2021) ***/\n\n/*\n    Remove all the styles of the \"User-Agent-Stylesheet\", except for the 'display' property\n    - The \"symbol *\" part is to solve Firefox SVG sprite bug\n */\n *:where(:not(iframe, canvas, img, svg, video):not(svg *, symbol *)) {\n    all: unset;\n    display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n\n/* Remove list styles (bullets/numbers) */\nol, ul {\n    list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n    max-width: 100%;\n}\n\n/* removes spacing between cells in tables */\ntable {\n    border-collapse: collapse;\n}\n\n/* revert the 'white-space' property for textarea elements on Safari */\ntextarea {\n    white-space: revert;\n}\n","body {\n    background-color: #454866;\n    color: white;\n    height: 100vh;\n    header {\n        height: 10vh;\n    }\n    footer {\n        height: 10vh;\n    }\n}\n","@keyframes rubik-s-rotation {\n    0% {\n        transform: rotateX(0deg) rotateY(160deg) rotateZ(45deg);\n    }\n    100% {\n        transform: rotateX(0deg) rotateY(520deg) rotateZ(45deg);\n    }\n}\n\n/* Those rules only generate the Rubik's Cube skeleton\n   see the .js files for more details on the process\n*/\n.scene {\n    height: 80vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .rubik-s-cube {\n        width: 3 * $cube-width;\n        height: 3 * $cube-height;\n        position: relative;\n        transform: rotateX(340deg) rotateY(160deg) rotateZ(0deg);\n        animation: rubik-s-rotation 10s linear infinite;\n        transform-style: preserve-3d;\n        &__cube {\n            position: absolute;\n            width: $cube-width;\n            height: $cube-height;\n            transform-style: preserve-3d;\n            &:nth-of-type(1) {\n                transform: translate3d(0, 0, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(3) {\n                transform: translate3d(0, 0, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(4) {\n                transform: translate3d($cube-width, 0, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(5) {\n                transform: translate3d($cube-width, 0, 0);\n            }\n            &:nth-of-type(6) {\n                transform: translate3d($cube-width, 0, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(7) {\n                transform: translate3d(2 * $cube-width, 0, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(8) {\n                transform: translate3d(2 * $cube-width, 0, 0);\n            }\n            &:nth-of-type(9) {\n                transform: translate3d(2 * $cube-width, 0, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(10) {\n                transform: translate3d(0, $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(11) {\n                transform: translate3d(0, $cube-height, 0);\n            }\n            &:nth-of-type(12) {\n                transform: translate3d(0, $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(13) {\n                transform: translate3d($cube-width, $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(14) {\n                transform: translate3d($cube-width, $cube-height, 0);\n            }\n            &:nth-of-type(15) {\n                transform: translate3d($cube-width, $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(16) {\n                transform: translate3d(2 * $cube-width, $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(17) {\n                transform: translate3d(2 * $cube-width, $cube-height, 0);\n            }\n            &:nth-of-type(18) {\n                transform: translate3d(2 * $cube-width, $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(19) {\n                transform: translate3d(0, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(20) {\n                transform: translate3d(0, 2 * $cube-height, 0);\n            }\n            &:nth-of-type(21) {\n                transform: translate3d(0, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(22) {\n                transform: translate3d($cube-width, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(23) {\n                transform: translate3d($cube-width, 2 * $cube-height, 0);\n            }\n            &:nth-of-type(24) {\n                transform: translate3d($cube-width, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &:nth-of-type(25) {\n                transform: translate3d(2 * $cube-width, 2 * $cube-height, $cube-depth * 2 * $transform-coeff);\n            }\n            &:nth-of-type(26) {\n                transform: translate3d(2 * $cube-width, 2 * $cube-height, 0);\n            }\n            &:nth-of-type(27) {\n                transform: translate3d(2 * $cube-width, 2 * $cube-height, $cube-depth * (- 2 * $transform-coeff));\n            }\n            &__side {\n                border: 4px solid $borders-clr;\n                box-sizing: border-box;\n                position: absolute;\n                &:nth-of-type(1),\n                &:nth-of-type(2) {\n                    width: $cube-width;\n                    height: $cube-height;\n                }\n                &:nth-of-type(1) {\n                    transform: translate3d(0, 0, $cube-depth * $transform-coeff);\n                }\n                &:nth-of-type(2) {\n                    transform: translate3d(0, 0, $cube-depth * (-$transform-coeff));\n                }\n                &:nth-of-type(3),\n                &:nth-of-type(4) {\n                    width: $cube-depth;\n                    height: $cube-height;\n                    left: 50%;\n                    top: 50%;\n                }\n                &:nth-of-type(3) {\n                    transform: translate(-50%, -50%) rotateY($side-rotation-angle) translate3d(0, 0, $cube-width * $transform-coeff);\n                }\n                &:nth-of-type(4) {\n                    transform: translate(-50%, -50%) rotateY(-$side-rotation-angle) translate3d(0, 0, $cube-width * $transform-coeff);\n                }\n                &:nth-of-type(5),\n                &:nth-of-type(6) {\n                    height: $cube-depth;\n                    width: $cube-width;\n                    top: 50%;\n                    left: 50%;\n                }\n                &:nth-of-type(5) {\n                    transform: translate(-50%, -50%) rotateX(-$side-rotation-angle) translate3d(0, 0, $cube-height * $transform-coeff);\n                }\n                &:nth-of-type(6) {\n                    transform: translate(-50%, -50%) rotateX($side-rotation-angle) translate3d(0, 0, $cube-height * $transform-coeff);\n                }\n            }\n            .covered {\n                background-color: $covered-sides-clr;\n            }\n        }\n    }\n}\n","// PALETTE\n$borders-clr: #000;\n$covered-sides-clr: #000;\n// FONTS\n// CUBES SIZING\n$cube-width: 60px;\n$cube-height: 60px;\n$cube-depth: 60px;\n$transform-coeff: -0.5;\n$side-rotation-angle: 90deg;\n"]}